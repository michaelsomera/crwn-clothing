{"ast":null,"code":"import { takeLatest, call, put } from 'redux-saga/effects';\nimport { firestore, convertCollectionsSnapshotToMap } from '../../firebase/firebase.utils';\nimport { fetchCollectionsSuccess, fetchCollectionsFailure } from './shop.actions';\nimport ShopActionTypes from './shop.types';\nexport function* fetchCollectionAsync() {\n  yield console.log('I am fired');\n\n  try {\n    const collectionRef = firestore.collection('collections');\n    const snapshot = yield collectionRef.get();\n    const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot);\n    yield put(fetchCollectionsSuccess(collectionMap));\n  } catch (error) {\n    yield put(fetchCollectionsFailure(error));\n  }\n}\nexport function* fetchCollectionStart() {\n  yield takeLatest(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/React_VSG/crwn-clothing/src/redux/shop/shop.sagas.js"],"names":["takeLatest","call","put","firestore","convertCollectionsSnapshotToMap","fetchCollectionsSuccess","fetchCollectionsFailure","ShopActionTypes","fetchCollectionAsync","console","log","collectionRef","collection","snapshot","get","collectionMap","error","fetchCollectionStart","FETCH_COLLECTION_START"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,IAApB,EAA0BC,GAA1B,QAAoC,oBAApC;AACA,SAAQC,SAAR,EAAkBC,+BAAlB,QAAwD,+BAAxD;AAEA,SAAQC,uBAAR,EAAiCC,uBAAjC,QAA+D,gBAA/D;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,OAAO,UAAUC,oBAAV,GAAgC;AACpC,QAAMC,OAAO,CAACC,GAAR,CAAY,YAAZ,CAAN;;AAEA,MAAI;AACA,UAAMC,aAAa,GAAGR,SAAS,CAACS,UAAV,CAAqB,aAArB,CAAtB;AACA,UAAMC,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB;AACA,UAAMC,aAAa,GAAG,MAAMd,IAAI,CAACG,+BAAD,EAAkCS,QAAlC,CAAhC;AACA,UAAMX,GAAG,CAACG,uBAAuB,CAACU,aAAD,CAAxB,CAAT;AACH,GALD,CAKE,OAAOC,KAAP,EAAc;AACZ,UAAMd,GAAG,CAACI,uBAAuB,CAACU,KAAD,CAAxB,CAAT;AACH;AAGH;AAED,OAAO,UAAUC,oBAAV,GAAgC;AACnC,QAAMjB,UAAU,CAACO,eAAe,CAACW,sBAAjB,EAAyCV,oBAAzC,CAAhB;AACH","sourcesContent":["import {takeLatest, call, put} from 'redux-saga/effects';\r\nimport {firestore,convertCollectionsSnapshotToMap} from '../../firebase/firebase.utils';\r\n\r\nimport {fetchCollectionsSuccess, fetchCollectionsFailure} from './shop.actions';\r\n\r\nimport ShopActionTypes from './shop.types';\r\n\r\nexport function* fetchCollectionAsync(){\r\n   yield console.log('I am fired');\r\n\r\n   try {\r\n       const collectionRef = firestore.collection('collections');\r\n       const snapshot = yield collectionRef.get();\r\n       const collectionMap = yield call(convertCollectionsSnapshotToMap, snapshot);\r\n       yield put(fetchCollectionsSuccess(collectionMap));\r\n   } catch (error) {\r\n       yield put(fetchCollectionsFailure(error));\r\n   }\r\n   \r\n\r\n}\r\n\r\nexport function* fetchCollectionStart(){\r\n    yield takeLatest(ShopActionTypes.FETCH_COLLECTION_START, fetchCollectionAsync);\r\n} "]},"metadata":{},"sourceType":"module"}