{"ast":null,"code":"import { takeLatest, put, all, call } from 'redux-saga/effects';\nimport UserActionTypes from './user.types';\nimport { auth, googleProvider, createUserProfileDocument, getCurrentUser } from '../../firebase/firebase.utils';\nimport { signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess } from './user.actions';\nexport function* getSnapshotFromAuth(userAuth, additionalData) {\n  try {\n    const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\n    const userSnapshot = yield userRef.get();\n    yield put(signInSuccess({\n      id: userSnapshot.id,\n      ...userSnapshot.data()\n    }));\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signOut() {\n  try {\n    yield auth.signOut();\n    yield put(signOutSuccess());\n  } catch (error) {\n    yield put(signOutFailure());\n  }\n}\nexport function* signUp({\n  payload: {\n    displayName,\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.createUserWithEmailAndPassword(email, password); // const userRef = yield call(createUserProfileDocument(user, {displayName}));\n    // const userSnapshot = yield userRef.get();\n\n    yield put(signUpSuccess({\n      user,\n      additionalData: {\n        displayName\n      }\n    }));\n  } catch (error) {\n    yield put(signUpFailure(error));\n  }\n}\nexport function* signInAfterSignUp({\n  payload: {\n    user,\n    additionalData\n  }\n}) {\n  yield getSnapshotFromAuth(user, additionalData);\n}\nexport function* signInWithGoogle() {\n  try {\n    const {\n      user\n    } = yield auth.signInWithPopup(googleProvider);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error.message));\n  }\n}\nexport function* signinWithEmail({\n  payload: {\n    email,\n    password\n  }\n}) {\n  try {\n    const {\n      user\n    } = yield auth.signInWithEmailAndPassword(email, password);\n    yield getSnapshotFromAuth(user);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* isUserAuthenticated() {\n  try {\n    const userAuth = yield getCurrentUser();\n    if (!userAuth) return;\n    yield getSnapshotFromAuth(userAuth);\n  } catch (error) {\n    yield put(signInFailure(error));\n  }\n}\nexport function* onGoogleSignInStart() {\n  yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle);\n}\nexport function* onEmailSignInStart() {\n  yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signinWithEmail);\n}\nexport function* onCheckUserSession() {\n  yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated);\n}\nexport function* onSignOutStart() {\n  yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut);\n}\nexport function* onSignUpStart() {\n  yield takeLatest(UserActionTypes.SIGN_UP_START, signUp);\n}\nexport function* onSignUpSuccess() {\n  yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp);\n}\nexport function* userSagas() {\n  yield all([call(onGoogleSignInStart), call(onEmailSignInStart), call(isUserAuthenticated), call(onSignOutStart), call(onSignUpStart)]);\n}","map":{"version":3,"sources":["C:/Users/Admin/Desktop/React_VSG/crwn-clothing/src/redux/user/user.sagas.js"],"names":["takeLatest","put","all","call","UserActionTypes","auth","googleProvider","createUserProfileDocument","getCurrentUser","signInSuccess","signInFailure","signOutSuccess","signOutFailure","signUpFailure","signUpSuccess","getSnapshotFromAuth","userAuth","additionalData","userRef","userSnapshot","get","id","data","error","message","signOut","signUp","payload","displayName","email","password","user","createUserWithEmailAndPassword","signInAfterSignUp","signInWithGoogle","signInWithPopup","signinWithEmail","signInWithEmailAndPassword","isUserAuthenticated","onGoogleSignInStart","GOOGLE_SIGN_IN_START","onEmailSignInStart","EMAIL_SIGN_IN_START","onCheckUserSession","CHECK_USER_SESSION","onSignOutStart","SIGN_OUT_START","onSignUpStart","SIGN_UP_START","onSignUpSuccess","SIGN_UP_SUCCESS","userSagas"],"mappings":"AAAA,SAAQA,UAAR,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAAyC,oBAAzC;AAEA,OAAOC,eAAP,MAA4B,cAA5B;AAEA,SAAQC,IAAR,EAAcC,cAAd,EAA8BC,yBAA9B,EAAyDC,cAAzD,QAA8E,+BAA9E;AACA,SAAQC,aAAR,EAAuBC,aAAvB,EAAsCC,cAAtC,EAAsDC,cAAtD,EAAsEC,aAAtE,EAAqFC,aAArF,QAAyG,gBAAzG;AAEA,OAAO,UAAUC,mBAAV,CAA8BC,QAA9B,EAAwCC,cAAxC,EAAuD;AAC1D,MAAI;AACA,UAAMC,OAAO,GAAG,MAAMf,IAAI,CAACI,yBAAD,EAA4BS,QAA5B,EAAsCC,cAAtC,CAA1B;AACA,UAAME,YAAY,GAAG,MAAMD,OAAO,CAACE,GAAR,EAA3B;AACA,UAAMnB,GAAG,CAACQ,aAAa,CAAC;AACpBY,MAAAA,EAAE,EAAEF,YAAY,CAACE,EADG;AAEpB,SAAGF,YAAY,CAACG,IAAb;AAFiB,KAAD,CAAd,CAAT;AAIH,GAPD,CAOE,OAAOC,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACS,aAAa,CAACa,KAAK,CAACC,OAAP,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUC,OAAV,GAAmB;AACtB,MAAI;AACA,UAAMpB,IAAI,CAACoB,OAAL,EAAN;AACA,UAAMxB,GAAG,CAACU,cAAc,EAAf,CAAT;AACH,GAHD,CAGE,OAAOY,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACW,cAAc,EAAf,CAAT;AACH;AACJ;AACD,OAAO,UAAUc,MAAV,CAAiB;AAACC,EAAAA,OAAO,EAAE;AAACC,IAAAA,WAAD;AAAcC,IAAAA,KAAd;AAAqBC,IAAAA;AAArB;AAAV,CAAjB,EAA2D;AAC9D,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAM1B,IAAI,CAAC2B,8BAAL,CAAoCH,KAApC,EAA2CC,QAA3C,CAArB,CADA,CAEA;AACA;;AACA,UAAM7B,GAAG,CAACa,aAAa,CAAC;AACpBiB,MAAAA,IADoB;AAEpBd,MAAAA,cAAc,EAAE;AAACW,QAAAA;AAAD;AAFI,KAAD,CAAd,CAAT;AAKH,GATD,CASE,OAAOL,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACY,aAAa,CAACU,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUU,iBAAV,CAA4B;AAACN,EAAAA,OAAO,EAAG;AAACI,IAAAA,IAAD;AAAOd,IAAAA;AAAP;AAAX,CAA5B,EAA+D;AAClE,QAAMF,mBAAmB,CAACgB,IAAD,EAAOd,cAAP,CAAzB;AACH;AAED,OAAO,UAAUiB,gBAAV,GAA6B;AAChC,MAAI;AACA,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAM1B,IAAI,CAAC8B,eAAL,CAAqB7B,cAArB,CAArB;AACA,UAAMS,mBAAmB,CAACgB,IAAD,CAAzB;AACH,GAHD,CAGE,OAAOR,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACS,aAAa,CAACa,KAAK,CAACC,OAAP,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUY,eAAV,CAA0B;AAACT,EAAAA,OAAO,EAAE;AAACE,IAAAA,KAAD;AAAQC,IAAAA;AAAR;AAAV,CAA1B,EAAuD;AAC1D,MAAI;AACA,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAM1B,IAAI,CAACgC,0BAAL,CAAgCR,KAAhC,EAAuCC,QAAvC,CAArB;AACA,UAAMf,mBAAmB,CAACgB,IAAD,CAAzB;AACH,GAHD,CAGE,OAAOR,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACS,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACJ;AACD,OAAO,UAAUe,mBAAV,GAA+B;AAClC,MAAI;AACA,UAAMtB,QAAQ,GAAG,MAAMR,cAAc,EAArC;AACA,QAAG,CAACQ,QAAJ,EAAc;AACd,UAAMD,mBAAmB,CAACC,QAAD,CAAzB;AACH,GAJD,CAIE,OAAOO,KAAP,EAAc;AACZ,UAAMtB,GAAG,CAACS,aAAa,CAACa,KAAD,CAAd,CAAT;AACH;AACJ;AAED,OAAO,UAAUgB,mBAAV,GAA+B;AAClC,QAAMvC,UAAU,CAACI,eAAe,CAACoC,oBAAjB,EAAuCN,gBAAvC,CAAhB;AACH;AAED,OAAO,UAAUO,kBAAV,GAA+B;AAClC,QAAMzC,UAAU,CAACI,eAAe,CAACsC,mBAAjB,EAAsCN,eAAtC,CAAhB;AACH;AAED,OAAO,UAAUO,kBAAV,GAA8B;AACjC,QAAM3C,UAAU,CAACI,eAAe,CAACwC,kBAAjB,EAAqCN,mBAArC,CAAhB;AACH;AAED,OAAO,UAAUO,cAAV,GAA0B;AAC7B,QAAM7C,UAAU,CAACI,eAAe,CAAC0C,cAAjB,EAAiCrB,OAAjC,CAAhB;AACH;AAED,OAAO,UAAUsB,aAAV,GAAyB;AAC5B,QAAM/C,UAAU,CAACI,eAAe,CAAC4C,aAAjB,EAAgCtB,MAAhC,CAAhB;AACH;AACD,OAAO,UAAUuB,eAAV,GAA2B;AAC9B,QAAMjD,UAAU,CAACI,eAAe,CAAC8C,eAAjB,EAAkCjB,iBAAlC,CAAhB;AACH;AAGD,OAAO,UAAUkB,SAAV,GAAsB;AACzB,QAAMjD,GAAG,CAAC,CACNC,IAAI,CAACoC,mBAAD,CADE,EAENpC,IAAI,CAACsC,kBAAD,CAFE,EAGNtC,IAAI,CAACmC,mBAAD,CAHE,EAINnC,IAAI,CAAC0C,cAAD,CAJE,EAKN1C,IAAI,CAAC4C,aAAD,CALE,CAAD,CAAT;AAOH","sourcesContent":["import {takeLatest, put, all, call} from 'redux-saga/effects';\r\n\r\nimport UserActionTypes from './user.types';\r\n\r\nimport {auth, googleProvider, createUserProfileDocument, getCurrentUser} from '../../firebase/firebase.utils';\r\nimport {signInSuccess, signInFailure, signOutSuccess, signOutFailure, signUpFailure, signUpSuccess} from './user.actions'\r\n\r\nexport function* getSnapshotFromAuth(userAuth, additionalData){\r\n    try {\r\n        const userRef = yield call(createUserProfileDocument, userAuth, additionalData);\r\n        const userSnapshot = yield userRef.get();\r\n        yield put(signInSuccess({\r\n            id: userSnapshot.id,\r\n            ...userSnapshot.data()\r\n        }));\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\n\r\nexport function* signOut(){\r\n    try {\r\n        yield auth.signOut();\r\n        yield put(signOutSuccess())\r\n    } catch (error) {\r\n        yield put(signOutFailure())\r\n    }\r\n}\r\nexport function* signUp({payload: {displayName, email, password}}){\r\n    try {\r\n        const {user} = yield auth.createUserWithEmailAndPassword(email, password);\r\n        // const userRef = yield call(createUserProfileDocument(user, {displayName}));\r\n        // const userSnapshot = yield userRef.get();\r\n        yield put(signUpSuccess({\r\n            user, \r\n            additionalData: {displayName}\r\n        }));\r\n        \r\n    } catch (error) {\r\n        yield put(signUpFailure(error));\r\n    }\r\n}\r\nexport function* signInAfterSignUp({payload : {user, additionalData}}){\r\n    yield getSnapshotFromAuth(user, additionalData);\r\n} \r\n\r\nexport function* signInWithGoogle() {\r\n    try {\r\n        const {user} = yield auth.signInWithPopup(googleProvider);\r\n        yield getSnapshotFromAuth(user);\r\n    } catch (error) {\r\n        yield put(signInFailure(error.message));\r\n    }\r\n}\r\nexport function* signinWithEmail({payload: {email, password}}){\r\n    try {\r\n        const {user} = yield auth.signInWithEmailAndPassword(email, password);\r\n        yield getSnapshotFromAuth(user);\r\n    } catch (error) {\r\n        yield put(signInFailure(error))\r\n    }\r\n}\r\nexport function* isUserAuthenticated(){\r\n    try {\r\n        const userAuth = yield getCurrentUser();\r\n        if(!userAuth) return;\r\n        yield getSnapshotFromAuth(userAuth);\r\n    } catch (error) {\r\n        yield put(signInFailure(error));\r\n    }\r\n}\r\n\r\nexport function* onGoogleSignInStart(){\r\n    yield takeLatest(UserActionTypes.GOOGLE_SIGN_IN_START, signInWithGoogle)\r\n}\r\n\r\nexport function* onEmailSignInStart() {\r\n    yield takeLatest(UserActionTypes.EMAIL_SIGN_IN_START, signinWithEmail)\r\n}\r\n\r\nexport function* onCheckUserSession(){\r\n    yield takeLatest(UserActionTypes.CHECK_USER_SESSION, isUserAuthenticated)\r\n}\r\n\r\nexport function* onSignOutStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_OUT_START, signOut)\r\n}\r\n\r\nexport function* onSignUpStart(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_START, signUp)\r\n}\r\nexport function* onSignUpSuccess(){\r\n    yield takeLatest(UserActionTypes.SIGN_UP_SUCCESS, signInAfterSignUp)\r\n}\r\n\r\n\r\nexport function* userSagas() {\r\n    yield all([\r\n        call(onGoogleSignInStart),\r\n        call(onEmailSignInStart),\r\n        call(isUserAuthenticated),\r\n        call(onSignOutStart),\r\n        call(onSignUpStart)\r\n    ]);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}